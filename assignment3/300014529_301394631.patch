Index: proc.h
===================================================================
--- proc.h	(revision 3)
+++ proc.h	(working copy)
@@ -1,3 +1,5 @@
+
+
 // Segments in proc->gdt.
 #define NSEGS     7
 
@@ -73,3 +75,4 @@
 //   original data and bss
 //   fixed-size stack
 //   expandable heap
+
Index: syscall.c
===================================================================
--- syscall.c	(revision 3)
+++ syscall.c	(working copy)
@@ -98,6 +98,7 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_cowfork(void);//3.4
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -121,6 +122,7 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_cowfork]   sys_cowfork,
 };
 
 void
Index: syscall.h
===================================================================
--- syscall.h	(revision 3)
+++ syscall.h	(working copy)
@@ -21,3 +21,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_cowfork 22
Index: vm.c
===================================================================
--- vm.c	(revision 3)
+++ vm.c	(working copy)
@@ -6,11 +6,19 @@
 #include "mmu.h"
 #include "proc.h"
 #include "elf.h"
+#include "spinlock.h"
 
 extern char data[];  // defined by kernel.ld
 pde_t *kpgdir;  // for use in scheduler()
 struct segdesc gdt[NSEGS];
 
+//3.4
+int allPhysPageSize = PHYSTOP / PGSIZE;
+struct{
+    struct spinlock lock;
+    int pageCounter[PHYSTOP/PGSIZE];
+}counterStruct;
+
 // Set up CPU's kernel segment descriptors.
 // Run once on entry on each CPU.
 void
@@ -37,6 +45,13 @@
   // Initialize cpu-local storage.
   cpu = c;
   proc = 0;
+
+  //3.4
+  int i;
+  initlock(&counterStruct.lock, "init_counter_lock"); // lock in counter struct
+
+  for(i = 0; i < allPhysPageSize; i++) // init all array to zero pages 
+      counterStruct.pageCounter[i] = 0;
 }
 
 // Return the address of the PTE in page table pgdir
@@ -194,17 +209,23 @@
 // Load a program segment into pgdir.  addr must be page-aligned
 // and the pages from addr to addr+sz must already be mapped.
 int
-loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
+loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz,uint flagWriteELF) //
 {
   uint i, pa, n;
   pte_t *pte;
 
-  if((uint) addr % PGSIZE != 0)
-    panic("loaduvm: addr must be page aligned");
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
       panic("loaduvm: address should exist");
-    pa = PTE_ADDR(*pte);
+    
+    if( flagWriteELF == 0 ) { //3.3
+    	*pte = *pte & ~PTE_W ; 
+    } else {
+        *pte = *pte | PTE_W ;
+    }
+
+    pa = PTE_ADDR(*pte) + ((uint)addr % PGSIZE);
+
     if(sz - i < PGSIZE)
       n = sz - i;
     else
@@ -242,53 +263,142 @@
   return newsz;
 }
 
-// Deallocate user pages to bring the process size from oldsz to
+// 3.4 Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 int
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 {
-  pte_t *pte;
-  uint a, pa;
+    pte_t *pte;
+    uint a, pa;
 
-  if(newsz >= oldsz)
-    return oldsz;
+    if(newsz >= oldsz)
+        return oldsz;
 
-  a = PGROUNDUP(newsz);
-  for(; a  < oldsz; a += PGSIZE){
-    pte = walkpgdir(pgdir, (char*)a, 0);
-    if(!pte)
-      a += (NPTENTRIES - 1) * PGSIZE;
-    else if((*pte & PTE_P) != 0){
-      pa = PTE_ADDR(*pte);
-      if(pa == 0)
-        panic("kfree");
-      char *v = p2v(pa);
-      kfree(v);
-      *pte = 0;
+    a = PGROUNDUP(newsz);
+    for(; a  < oldsz; a += PGSIZE){
+        pte = walkpgdir(pgdir, (char*)a, 0);
+        if(!pte)
+            a += (NPTENTRIES - 1) * PGSIZE;
+
+        else if((*pte & PTE_P) != 0) {
+            pa = PTE_ADDR(*pte);
+
+            acquire(&counterStruct.lock);
+
+            if(counterStruct.pageCounter[pa/PGSIZE] == 1) {
+                counterStruct.pageCounter[pa/PGSIZE] = 0;
+                release(&counterStruct.lock);
+                if(pa == 0)
+                    panic("kfree");
+                char *v = p2v(pa);
+                kfree(v);
+                *pte = 0;
+            } else {
+                if(counterStruct.pageCounter[pa/PGSIZE] == 0) {
+                    if(pa == 0)
+                        panic("kfree");
+                    char *v = p2v(pa);
+                    kfree(v);
+                    *pte = 0;
+                    release(&counterStruct.lock);
+                    return newsz;
+                } else {
+                    counterStruct.pageCounter[pa/PGSIZE]--;
+                    if(counterStruct.pageCounter[pa/PGSIZE] == 1) {
+                        if((*pte & PTE_SHARED) != 0) {
+                            *pte = *pte & ~PTE_SHARED;
+                            *pte = *pte | PTE_W ;
+                        }
+                    }
+                }
+                    release(&counterStruct.lock);
+            }
+
+            // 3.4
+            // True - only one page is pointed need to free page
+
+
+            /*if( (*pte & PTE_SHARED) ) { //TODO
+                if(removePageFromCounter(pa,pte)) { 
+                    if(pa == 0)
+                        panic("kfree");
+                    char *v = p2v(pa);
+                    kfree(v);
+                    *pte = 0;
+                }
+            } else {
+                if(pa == 0)
+                    panic("kfree");
+                char *v = p2v(pa);
+                kfree(v);
+                *pte = 0;
+            }*/
+        }
     }
-  }
-  return newsz;
+    return newsz;
 }
 
+// 3.4 get pa in remove from page counter struct
+// True - only onw page in counter
+int 
+removePageFromCounter(uint pa,pte_t* pte)
+{
+    acquire(&counterStruct.lock);
+
+    int pageIndex = pa / PGSIZE;
+    int *pce = &(counterStruct.pageCounter[pageIndex]);
+
+    switch((*pce)) {
+
+        case 0: 
+            panic("Error: removePageFromCounter(); counter entry is 0"); 
+            release(&counterStruct.lock);
+            break;
+        
+        case 1:  // will kfree page for shizel!
+            (*pce) = 0;
+            release(&counterStruct.lock);
+            return 1;
+            break;
+
+        case 2: 
+            (*pce) = (*pce) - 1;
+            if((*pte & PTE_SHARED) != 0) {
+                (*pte) = (*pte) & PTE_SHARED; //TODO
+                (*pte) = (*pte) | PTE_W;
+            }
+            release(&counterStruct.lock);
+            return 0;
+            break;
+
+        default:
+            (*pce) = (*pce) - 1;
+            release(&counterStruct.lock);
+            return 0;
+            break;
+    }
+    return 0;
+}
+
 // Free a page table and all the physical memory pages
 // in the user part.
 void
 freevm(pde_t *pgdir)
 {
-  uint i;
+    uint i;
 
-  if(pgdir == 0)
-    panic("freevm: no pgdir");
-  deallocuvm(pgdir, KERNBASE, 0);
-  for(i = 0; i < NPDENTRIES; i++){
-    if(pgdir[i] & PTE_P){
-      char * v = p2v(PTE_ADDR(pgdir[i]));
-      kfree(v);
+    if(pgdir == 0)
+        panic("freevm: no pgdir");
+    deallocuvm(pgdir, KERNBASE, 0);
+    for(i = 0; i < NPDENTRIES; i++){
+        if(pgdir[i] & PTE_P){
+            char * v = p2v(PTE_ADDR(pgdir[i]));
+            kfree(v);
+        }
     }
-  }
-  kfree((char*)pgdir);
+    kfree((char*)pgdir);
 }
 
 // Clear PTE_U on a page. Used to create an inaccessible
@@ -316,7 +426,7 @@
 
   if((d = setupkvm()) == 0)
     return 0;
-  for(i = 0; i < sz; i += PGSIZE){
+  for(i = PGSIZE; i < sz; i += PGSIZE){
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
       panic("copyuvm: pte should exist");
     if(!(*pte & PTE_P))
@@ -325,8 +435,14 @@
     if((mem = kalloc()) == 0)
       goto bad;
     memmove(mem, (char*)p2v(pa), PGSIZE);
-    if(mappages(d, (void*)i, PGSIZE, v2p(mem), PTE_W|PTE_U) < 0)
-      goto bad;
+   //3.3 
+    if( (*pte & PTE_W )!= 0 ) {
+    	if(mappages(d, (void*)i, PGSIZE, v2p(mem), PTE_W|PTE_U) < 0)
+    		goto bad;
+    } else {
+        if(mappages(d, (void*)i, PGSIZE, v2p(mem), PTE_U) < 0)
+        	goto bad;
+    }
   }
   return d;
 
@@ -375,3 +491,115 @@
   }
   return 0;
 }
+
+// 3.4
+pde_t*
+copyuvm_cow(pde_t *pgdir, uint sz)
+{
+  pde_t *d;
+  pte_t *pte;
+  uint pa, i;
+
+  if((d = setupkvm()) == 0)
+    return 0;
+
+  for(i = PGSIZE; i < sz; i += PGSIZE) {
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+      panic("cowcopyuvm: pte should exist");
+    if(!(*pte & PTE_P))
+      panic("cowcopyuvm: page not present");
+
+    pa = PTE_ADDR(*pte);
+    *pte = *pte | PTE_PCOUNT; // 3.4 indicate page belong to counter 
+
+	if((*pte & PTE_W) || (*pte & PTE_SHARED)) {
+		if( mappages(d, (void*)i, PGSIZE, pa, PTE_SHARED | PTE_U) < 0 ) // insure page to be read only
+			goto bad;
+		*pte = *pte & ~PTE_W ; 
+        *pte = *pte | PTE_SHARED;
+        
+
+    } else { // page is already read only
+		if(mappages(d, (void*)i, PGSIZE, pa , PTE_RONLY | PTE_U) < 0)
+			goto bad;
+    }
+        //////////////////////////////////
+        // updating counter struct with new pointed page
+        acquire(&counterStruct.lock);
+        int *pce = &(counterStruct.pageCounter[pa/PGSIZE]); // Page Counter Enry \m/
+
+            if( (*pce) == 0) {
+                *pce = 2; // first Initialize father and son pointing to page
+            } else {
+                (*pce) = (*pce) + 1;
+            }
+        release(&counterStruct.lock);
+        ///////////////////////////////////
+        
+  }
+	asm("movl %cr3,%eax");
+	asm("movl %eax,%cr3");
+    return d;
+
+bad:
+  freevm(d);
+  return 0;
+}
+
+int
+handler_pgflt() 
+{
+	pte_t *pte ;
+	char* mem;
+	uint pa;
+	void* fault_addr = (void*)rcr2();
+
+    if((pte = walkpgdir(proc->pgdir, (void *) fault_addr , 0)) == 0)
+    	panic("pageFaultHandler: pte should exist");
+
+    if(( (*pte & PTE_RONLY) != 0) ) {
+        panic("try to write to READ ONLY");
+        return 0;
+    }
+
+    if(((*pte & PTE_SHARED) != 0)) { 
+
+		pa = PTE_ADDR(*pte);
+
+        acquire(&counterStruct.lock);
+        int *pce = &(counterStruct.pageCounter[pa/PGSIZE]);
+
+        (*pce) = (*pce) - 1;
+        if((*pce) == 1) {
+            *pte = *pte & ~PTE_SHARED;
+            *pte = *pte | PTE_W;
+        } 
+        release(&counterStruct.lock);
+
+        if((mem = kalloc()) == 0)
+            panic("pageFaultHandler: can't kalloc mem\n");
+
+		memmove(mem, (char*)p2v(pa), PGSIZE);
+
+		*pte = v2p(mem) | PTE_W | PTE_P | PTE_U; 
+
+		asm("movl %cr3,%eax");
+		asm("movl %eax,%cr3");
+
+		return 1;
+
+    } else {
+    	return 0;
+    }
+}
+
+void
+printCounter() 
+{
+    int i; 
+    for(i = 0 ; i < allPhysPageSize ; i++) {
+        if(counterStruct.pageCounter[i] == 0)
+            continue;
+        cprintf("pageCounter[%d] = %d\n",i,counterStruct.pageCounter[i]);
+    }
+}
Index: defs.h
===================================================================
--- defs.h	(revision 3)
+++ defs.h	(working copy)
@@ -116,6 +116,7 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int             cowfork(void); //3.4
 
 // swtch.S
 void            swtch(struct context**, struct context*);
@@ -170,12 +171,16 @@
 int             deallocuvm(pde_t*, uint, uint);
 void            freevm(pde_t*);
 void            inituvm(pde_t*, char*, uint);
-int             loaduvm(pde_t*, char*, struct inode*, uint, uint);
+int             loaduvm(pde_t*, char*, struct inode*, uint, uint, uint);//
 pde_t*          copyuvm(pde_t*, uint);
 void            switchuvm(struct proc*);
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
+pde_t*			copyuvm_cow(pde_t *pgdir, uint sz); //3.4
+int				handler_pgflt(); //3.4
+int				removePageFromCounter(uint pa,pde_t *pte); //3.4 FIXME pte -> pde
+void            printCounter(); //3.4
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
Index: sysproc.c
===================================================================
--- sysproc.c	(revision 3)
+++ sysproc.c	(working copy)
@@ -88,3 +88,10 @@
   release(&tickslock);
   return xticks;
 }
+
+//3.4
+int
+sys_cowfork(void)
+{
+  return cowfork();
+}
Index: test5.c
===================================================================
--- test5.c	(revision 0)
+++ test5.c	(revision 0)
@@ -0,0 +1,84 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+    int pid;
+
+	printf(1,"allocationg a value in parent\n",getpid());
+	int* value = malloc(sizeof(int));
+	*value = 99999;
+	printf(1,"value's address: %p\n", value);
+	printf(1,"value = %d\n",*value);
+
+	printf(1,"Parent %d is forking a child using fork()\n",getpid());
+	if (fork() == 0) {
+		printf(1, "child %d value's address is: %p\n", getpid(), value);
+		printf(1, "child %d is only sleeping, press ^p\n", getpid());
+		sleep(500);
+		/*goto done;*/
+        exit();
+	} 
+
+    pid = wait();
+    printf(1,"\nchild %d is dead, let's continue\n\n",pid);
+    sleep(100);
+
+    printf(1,"Parent %d is forking another child using cowfork()\n",getpid());
+    if (cowfork() == 0) {
+        printf(1, "child %d value's address is: %p\n", getpid(), value);
+        printf(1, "child %d is only sleeping, press ^p\n", getpid());
+        sleep(500);
+        /*goto done;*/
+        exit();
+    }
+
+    pid = wait();
+    printf(1,"\nchild %d is dead, let's continue\n\n",pid);
+    sleep(100);
+
+    printf(1,"Parent %d is forking another child using cowfork()\n",getpid());
+    if (cowfork() == 0) {
+        printf(1, "child %d value's address is: %p\n", getpid(), value);
+        *value = 11111;
+        printf(1, "child %d changed the value, now value = %d\n", getpid(),*value);
+        printf(1, "child %d value's address is: %p\n", getpid(), value);
+        printf(1, "child %d is now sleeping, press ^p\n", getpid());
+        sleep(500);
+        /*goto done;*/
+        exit();
+    }
+
+    pid = wait();
+
+    printf(1,"\nchild %d is dead, let's continue\n",pid);
+    printf(1,"******Parent %d is forking 2 childs using cowfork()******\n",getpid());
+
+    if ((pid = cowfork()) == 0) {
+        printf(1, "child %d value's address is: %p\n", getpid(), value);
+        *value = 22222;
+        printf(1, "child %d changed the value, now value = %d\n", getpid(),*value);
+        printf(1, "child %d value's address is: %p\n", getpid(), value);
+        while(1)
+        {}
+        exit();
+    }
+    if (cowfork() == 0) {
+
+        printf(1, "child %d is now sleeping, press ^p\n", getpid());
+        sleep(500);
+        kill(pid);
+        exit();
+    } 
+    printf(1,"\nparent %d is wating for nothing\n",pid);
+    wait();
+    wait();
+
+    printf(1,"\nchild %d is dead, let's finish\n",pid);
+    printf(1,"all kids are dead");
+    sleep(200);
+
+    exit();
+}
Index: user.h
===================================================================
--- user.h	(revision 3)
+++ user.h	(working copy)
@@ -22,6 +22,7 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int cowfork(void); //3.4
 
 // ulib.c
 int stat(char*, struct stat*);
Index: forktest.c
===================================================================
--- forktest.c	(revision 0)
+++ forktest.c	(revision 0)
@@ -0,0 +1,56 @@
+// Test that fork fails gracefully.
+// Tiny executable so that the limit can be filling the proc table.
+
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+#define N  100
+
+void
+printf(int fd, char *s, ...)
+{
+  write(fd, s, strlen(s));
+}
+
+void
+forktest(void)
+{
+  int n, pid;
+
+  printf(1, "fork test\n");
+
+  for(n=0; n<N; n++) {
+    pid = cowfork();
+    if(pid < 0)
+      break;
+    if(pid == 0)
+      exit();
+  }
+  
+  if(n == N) {
+    printf(1, "fork claimed to work N times!\n", N);
+    exit();
+  }
+  
+  for(; n > 0; n--) {
+    if(wait() < 0){
+      printf(1, "wait stopped early\n");
+      exit();
+    }
+  }
+  
+  if(wait() != -1) {
+    printf(1, "wait got too many\n");
+    exit();
+  }
+  
+  printf(1, "fork test OK\n");
+}
+
+int
+main(void)
+{
+  forktest();
+  exit();
+}
Index: exec.c
===================================================================
--- exec.c	(revision 3)
+++ exec.c	(working copy)
@@ -33,7 +33,8 @@
     goto bad;
 
   // Load program into memory.
-  sz = 0;
+  /*sz = 0*/
+  sz = PGSIZE - 1; //3.2
   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
     if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
       goto bad;
@@ -43,7 +44,9 @@
       goto bad;
     if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
       goto bad;
-    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
+
+    uint flagWriteELF = ph.flags & ELF_PROG_FLAG_WRITE; //3.3
+    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz,flagWriteELF) < 0)
       goto bad;
   }
   iunlockput(ip);
Index: usys.S
===================================================================
--- usys.S	(revision 3)
+++ usys.S	(working copy)
@@ -29,3 +29,4 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(cowfork) //3.4
Index: Makefile
===================================================================
--- Makefile	(revision 3)
+++ Makefile	(working copy)
@@ -29,7 +29,7 @@
 	vm.o\
 
 # Cross-compiling (e.g., on Mac OS X)
-#TOOLPREFIX = i386-jos-elf-
+#TOOLPREFIX = i386-elf-
 
 # Using native tools (e.g., on X86 Linux)
 #TOOLPREFIX = 
@@ -51,7 +51,7 @@
 endif
 
 # If the makefile can't find QEMU, specify its path here
-#QEMU = qemu-system-x86_64
+QEMU = qemu-system-x86_64
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -135,14 +135,14 @@
 ULIB = ulib.o usys.o printf.o umalloc.o
 
 _%: %.o $(ULIB)
-	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^
+	$(LD) $(LDFLAGS) -N --no-omagic -e main -Ttext 0x1000 -o $@ $^
 	$(OBJDUMP) -S $@ > $*.asm
 	$(OBJDUMP) -t $@ | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $*.sym
 
 _forktest: forktest.o $(ULIB)
 	# forktest has less library code linked in - needs to be small
 	# in order to be able to max out the proc table.
-	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o _forktest forktest.o ulib.o usys.o
+	$(LD) $(LDFLAGS) -N -e main -Ttext 0x1000 -o _forktest forktest.o ulib.o usys.o
 	$(OBJDUMP) -S _forktest > forktest.asm
 
 mkfs: mkfs.c fs.h
@@ -161,6 +161,8 @@
 	_sh\
 	_wc\
 	_zombie\
+	_forktest\
+	_test5\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -230,7 +232,7 @@
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c test5.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
Index: mmu.h
===================================================================
--- mmu.h	(revision 3)
+++ mmu.h	(working copy)
@@ -139,6 +139,9 @@
 #define PTE_D           0x040   // Dirty
 #define PTE_PS          0x080   // Page Size
 #define PTE_MBZ         0x180   // Bits must be zero
+#define PTE_SHARED      0x200   // Shared flag
+#define PTE_PCOUNT      0x400   // bit indicate process with not counter page relation
+#define PTE_RONLY       0x800   // bit indicate readonly 
 
 // Address in page table or page directory entry
 #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
Index: proc.c
===================================================================
--- proc.c	(revision 3)
+++ proc.c	(working copy)
@@ -19,6 +19,8 @@
 extern void forkret(void);
 extern void trapret(void);
 
+extern void printCounter();
+
 static void wakeup1(void *chan);
 
 void
@@ -444,6 +446,7 @@
 void
 procdump(void)
 {
+  cprintf("\n------------------------------procdump-----------------------------------\n");
   static char *states[] = {
   [UNUSED]    "unused",
   [EMBRYO]    "embryo",
@@ -456,22 +459,124 @@
   struct proc *p;
   char *state;
   uint pc[10];
-  
+
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->state == UNUSED)
-      continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-      state = states[p->state];
-    else
-      state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
-        cprintf(" %p", pc[i]);
-    }
-    cprintf("\n");
+      if(p->state == UNUSED)
+          continue;
+      if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+          state = states[p->state];
+      else
+          state = "???";
+      cprintf("%d %s %s", p->pid, state, p->name);
+      if(p->state == SLEEPING || p->state == RUNNABLE || p->state == RUNNING){
+          getcallerpcs((uint*)p->context->ebp+2, pc);
+          for(i=0; i<10 && pc[i] != 0; i++)
+              cprintf(" %p", pc[i]);
+          //3.1
+          cprintf("\n*Page tables:\n");
+          cprintf("memory location of page directory = %d\n",p->pgdir);
+          int n = 1;
+          for(i=0 ; i < NPDENTRIES ;i++) {
+              //1.3
+              int j;
+              pde_t *pde = &p->pgdir[i];              // page drivetory entry
+              pte_t *pgtab;                           // page table address
+              pde_t *pte;                             // page table entry
+
+              if((*pde & PTE_P) && (*pde & PTE_U) && (*pde & PTE_A)) {
+                  uint pde_ppn    =  PTE_ADDR(*pde);          // 20 MSBs in pgdir entry.
+                  pgtab = (pte_t*)p2v(pde_ppn);               // address of relevant page table
+                  uint phyppn;
+                  uint pte_ppn;
+
+                  cprintf("\n%d) pdir PTE %d, %p \n",n,i,pde_ppn);
+                  n++;
+                  cprintf("memory location of page table = %p\n",pgtab);
+                  for(j=0 ; j < NPTENTRIES ; j++) {
+                      pte = &pgtab[j];
+
+                      if((*pte & PTE_P) && (*pte & PTE_U) && (*pte & PTE_A)) {
+                          pte_ppn = PTE_ADDR(*pte);
+                          phyppn = (pte_t)p2v(pte_ppn);
+                          cprintf("    |__ptble PTE %d, %d, %p\n",j,pte_ppn,phyppn);
+                      }
+                  }
+              }
+          }
+          cprintf("\n\n**Page mapping**\n"); 
+          for(i=0 ; i < NPDENTRIES ;i++) {
+              //1.3
+              int j;
+              pde_t *pde = &p->pgdir[i];              // page drivetory entry
+              pte_t *pgtab;                           // page table address
+              pde_t *pte;                             // page table entry
+
+              if((*pde & PTE_P) && (*pde & PTE_U)  ) {
+                  uint pde_ppn    =  PTE_ADDR(*pde);          // 20 MSBs in pgdir entry.
+                  pgtab = (pte_t*)p2v(pde_ppn);               // address of relevant page table
+                  uint virppn;
+                  uint pte_ppn;
+
+                  for(j=0 ; j < NPTENTRIES ; j++) {
+                      pte = &pgtab[j];
+
+                      if((*pte & PTE_P) && (*pte & PTE_U) ) {
+                          pte_ppn = PTE_ADDR(*pte);
+                          virppn = (pte_t)p2v(pte_ppn);
+
+                          char *readOnly = "n";
+                          char *shared   = "n";
+                          
+                          if((*pte & PTE_SHARED)) {
+                              shared = "y";
+                          } else if (!(*pte & PTE_W)) {
+                              readOnly = "y";
+                          }
+                          cprintf("%d -> %d , %s , %s \n",virppn,pte_ppn,readOnly,shared);
+                      }
+                  }
+              }
+          }
+      }
+    cprintf("-------------------------------------------------------------------------\n");
   }
 }
 
+// 3.4 Create a new process copying p as the parent.
+// Sets up stack to return as if from system call.
+// Caller must set state of returned proc to RUNNABLE.
+int
+cowfork(void)
+{
+  int i, pid;
+  struct proc *np;
 
+  // Allocate process.
+  if((np = allocproc()) == 0)
+    return -1;
+
+  // Copy process state from p.
+  if((np->pgdir = copyuvm_cow(proc->pgdir, proc->sz)) == 0){
+    kfree(np->kstack);
+    np->kstack = 0;
+    np->state = UNUSED;
+    return -1;
+  }
+  np->sz = proc->sz;
+  np->parent = proc;
+  *np->tf = *proc->tf;
+
+  // Clear %eax so that fork returns 0 in the child.
+  np->tf->eax = 0;
+
+  for(i = 0; i < NOFILE; i++)
+    if(proc->ofile[i])
+      np->ofile[i] = filedup(proc->ofile[i]);
+  np->cwd = idup(proc->cwd);
+ 
+  pid = np->pid;
+  np->state = RUNNABLE;
+  safestrcpy(np->name, proc->name, sizeof(proc->name));
+  return pid;
+}
+
Index: trap.c
===================================================================
--- trap.c	(revision 3)
+++ trap.c	(working copy)
@@ -46,6 +46,13 @@
     return;
   }
 
+  if( tf->trapno == T_PGFLT ) // 3.4
+  {
+	  proc->tf = tf ;
+	  if(handler_pgflt()) {
+		  return;
+	  }
+  }
   switch(tf->trapno){
   case T_IRQ0 + IRQ_TIMER:
     if(cpu->id == 0){
